body {
  font-family: "Avenir",Helvetica,Arial,sans-serif;
  font-size: 1rem; }
  body.teal {
    color: #008AAB; }
    body.teal .st0 {
      fill: #008AAB; }
    body.teal a {
      color: #008AAB; }
  body.purple {
    color: #500778; }
    body.purple .st0 {
      fill: #500778; }
    body.purple a {
      color: #500778; }
  body.orange {
    color: #FFAD00; }
    body.orange .st0 {
      fill: #FFAD00; }
    body.orange a {
      color: #FFAD00; }
  @media screen and (min-width: 769px) {
    body {
      font-size: 1.04167vw; } }
  @media screen and (min-width: 1537px) {
    body {
      font-size: 1rem; } }

.row {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex; }

img {
  max-width: 100%;
  height: auto; }
header {
  padding: 15px 0;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column; }
  @media screen and (min-width: 769px) {
    header {
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
          -ms-flex-direction: row;
              flex-direction: row; } }

.header__menu {
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  font-size: 1.125rem; }
  @media screen and (min-width: 769px) {
    .header__menu {
      font-size: 1.5625vw; } }
  @media screen and (min-width: 1537px) {
    .header__menu {
      font-size: 1.5rem; } }

.menu__item a {
  padding: 0.65104vw 0.65104vw 0.65104vw 0.65104vw;
  margin: 0.65104vw 0.65104vw 0.65104vw 0.65104vw; }
  @media screen and (min-width: 769px) {
    .menu__item a {
      padding: 0.32552vw 0.65104vw; } }
  @media screen and (min-width: 1537px) {
    .menu__item a {
      padding: 5px 10px; } }
  @media screen and (min-width: 769px) {
    .menu__item a {
      margin: 0.32552vw; } }
  @media screen and (min-width: 1537px) {
    .menu__item a {
      margin: 5px; } }

.menu__quote {
  border-style: solid;
  border-width: 1px; }
  .purple .menu__quote {
    border-color: #500778; }
    .purple .menu__quote:hover {
      color: #FFF;
      background-color: #500778; }

.menu__login {
  border-style: solid;
  border-width: 1px; }
  .purple .menu__login {
    border-color: #500778;
    background-color: #500778;
    color: #FFF; }
.hero__content {
  width: 100%;
  background-position: center center;
  background-repeat: no-repeat;
  background-size: cover;
  color: #FFF;
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: flex-end; }

.hero__body {
  width: 50%; }
  .hero__body .title {
    font-size: 1.875rem; }
    @media screen and (min-width: 769px) {
      .hero__body .title {
        font-size: 1.95312vw; } }
    @media screen and (min-width: 1537px) {
      .hero__body .title {
        font-size: 1.875rem; } }
a {
  text-decoration: none; }

h1 {
  font-weight: 700;
  font-size: 4em; }

h2, h3 {
  margin-top: 0; }

p {
  margin: 0; }

.bold {
  font-weight: 700; }

.icons {
  float: right;
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: 1px;
  font-size: .8em;
  text-align: center; }

.download {
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: 1px;
  font-size: .8em;
  text-align: center; }

.icons .material-icons {
  font-size: 36px; }

.icons div {
  display: inline-block;
  margin: 0 10px; }

.title {
  margin: 10px 0;
  font-size: 1.2em; }
  .title .material-icons {
    position: relative;
    top: 3px;
    font-size: 1em;
    margin-right: 5px; }

.div-shadow {
  box-shadow: #999 2px 2px 5px;
  padding: 30px;
  margin: 15px 0; }
  .div-shadow.img {
    padding: 0; }
    .div-shadow.img img {
      width: 100%; }
  .div-shadow.white {
    background: #fff; }

ul {
  padding: 0; }
  ul li {
    list-style: none; }

ol {
  padding: 0 15px; }

li {
  margin: 10px 0; }
#footer {
  color: #FFF;
  -webkit-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  background-color: #008AAB; }
  @media screen and (min-width: 769px) {
    #footer {
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
          -ms-flex-direction: row;
              flex-direction: row; } }
  #footer a {
    color: #FFF; }

.footer__menu {
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  background-color: #009dbb;
  padding: 2.60417vw; }
  @media screen and (min-width: 1537px) {
    .footer__menu {
      padding: 40px; } }
  @media screen and (min-width: 769px) {
    .footer__menu {
      width: 80%; } }
  .footer__menu-title {
    font-size: 1.125rem; }
    @media screen and (min-width: 769px) {
      .footer__menu-title {
        font-size: 1.5625vw; } }
    @media screen and (min-width: 1537px) {
      .footer__menu-title {
        font-size: 1.5rem; } }
  .footer__menu-item a {
    padding: 0.65104vw 0;
    margin: 0; }
    @media screen and (min-width: 1537px) {
      .footer__menu-item a {
        padding: 10px 0px; } }
    @media screen and (min-width: 1537px) {
      .footer__menu-item a {
        margin: 0px; } }

.footer__copyright {
  padding: 2.60417vw; }
  @media screen and (min-width: 1537px) {
    .footer__copyright {
      padding: 40px; } }
.btn {
  text-transform: uppercase;
  border: none;
  border-radius: 0;
  width: 100%;
  outline: none; }
  .btn p {
    font-weight: 700;
    letter-spacing: .5px; }
    .btn p:hover {
      color: inherit; }
  .btn.play {
    background: transparent url(ad8e4302afa41418403d86f1ca3f65a7.png) no-repeat center center;
    background-size: cover;
    width: 3.90625vw;
    height: 3.90625vw; }
    @media screen and (min-width: 769px) {
      .btn.play {
        width: 1.95312vw; } }
    @media screen and (min-width: 1537px) {
      .btn.play {
        width: 30px; } }
    @media screen and (min-width: 769px) {
      .btn.play {
        height: 1.95312vw; } }
    @media screen and (min-width: 1537px) {
      .btn.play {
        height: 30px; } }
.pod__container {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex; }

.pod .image img {
  max-width: 100%; }

.pod .image i {
  font-size: 60px; }

.pod .title {
  font-size: 1.875rem;
  line-height: 30px;
  margin-bottom: 10px; }
  @media screen and (min-width: 769px) {
    .pod .title {
      font-size: 1.95312vw; } }
  @media screen and (min-width: 1537px) {
    .pod .title {
      font-size: 1.875rem; } }

.pod .source {
  font-size: 10px; }

.pod .link {
  padding-top: 15px; }

.pod2 {
  border-top: solid 1px #BBBCBC; }
a.cta {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: flex-end;
  text-decoration: none;
  color: inherit; }
  a.cta .text {
    text-transform: uppercase; }
  a.cta i {
    font-size: inherit;
    padding-left: 10px; }

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/